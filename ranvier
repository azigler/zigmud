#!/usr/bin/env node

/**
 * Main file to run the server:
 *
 * node ranvier [options]
 *
 * Options:
 *  -p, --port [portNumber]   Port to host the server (23)
 *  -v, --verbose             Verbose console logging (true)
 *  -e, --prettyErrors        Pretty-print formatting for error stack traces (false)
 */

const semver = require('semver')
const commander = require('commander')
const fs = require('fs')
const path = require('path')

const Ranvier = require('ranvier')
const Config = Ranvier.Config

const pkg = require('./package.json')

// check Node version
if (!semver.satisfies(process.version, pkg.engines.node)) {
  throw new Error(
    `Ranvier's core engine requires Node version ${pkg.engines.node}. You are currently running Node ${process.version}.`
  )
}

// set data path
Ranvier.Data.setDataPath(path.join(__dirname, '/data/'))

// check for ranvier.json
if (fs.existsSync('./ranvier.conf.js')) {
  Config.load(require('./ranvier.conf.js'))
} else if (fs.existsSync('./ranvier.json')) {
  Config.load(require('./ranvier.json'))
} else {
  console.error('ERROR: No ranvier.json or ranvier.conf.js found')
  process.exit(1)
}

// handle command line options
commander
  .version(pkg.version)
  .option('-p, --port [portNumber]', 'Port to host the server [23]', Ranvier.Config.get('port', 23))
  .option('-v, --verbose', 'Verbose console logging.', true)
  .option('-e, --prettyErrors', 'Pretty-print formatting for error stack traces.', false)
  .parse(process.argv)

// set debug variable and encoding
process.env.NODE_DEBUG = 'net'
process.stdin.setEncoding('utf8')

// initialize logging
const Logger = Ranvier.Logger
const logfile = Ranvier.Config.get('logfile')
if (logfile) {
  Logger.setFileLogging(`${__dirname}/log/${logfile}`)
}

// configure logging errors
if (commander.prettyErrors) {
  Logger.enablePrettyErrors()
}

// set logging level based on command line option or environment variable
const logLevel = commander.verbose
  ? 'verbose'
  : process.env.LOG_LEVEL || Config.get('logLevel') || 'debug'
Logger.setLevel(logLevel)

// initialize game state object and intervals
let GameState = {}
let tickInterval, playerTickInterval

/**
 * Initialize the Ranvier game server
 * @async
 * @param {boolean} startServer
 */
async function init (startServer) {
  Logger.log('START - Initializing game state')
  startServer = typeof startServer === 'undefined' ? true : startServer

  GameState = {
    AccountManager: new Ranvier.AccountManager(),
    AreaBehaviorManager: new Ranvier.BehaviorManager(),
    AreaFactory: new Ranvier.AreaFactory(),
    AreaManager: new Ranvier.AreaManager(),
    AttributeFactory: new Ranvier.AttributeFactory(),
    ChannelManager: new Ranvier.ChannelManager(),
    CommandManager: new Ranvier.CommandManager(),
    EffectFactory: new Ranvier.EffectFactory(),
    HelpManager: new Ranvier.HelpManager(),
    InputEventManager: new Ranvier.EventManager(),
    ItemBehaviorManager: new Ranvier.BehaviorManager(),
    ItemFactory: new Ranvier.ItemFactory(),
    ItemManager: new Ranvier.ItemManager(),
    MobBehaviorManager: new Ranvier.BehaviorManager(),
    MobFactory: new Ranvier.MobFactory(),
    MobManager: new Ranvier.MobManager(),
    PartyManager: new Ranvier.PartyManager(),
    PlayerManager: new Ranvier.PlayerManager(),
    QuestFactory: new Ranvier.QuestFactory(),
    QuestGoalManager: new Ranvier.QuestGoalManager(),
    QuestRewardManager: new Ranvier.QuestRewardManager(),
    RoomBehaviorManager: new Ranvier.BehaviorManager(),
    RoomFactory: new Ranvier.RoomFactory(),
    RoomManager: new Ranvier.RoomManager(),
    SkillManager: new Ranvier.SkillManager(),
    SpellManager: new Ranvier.SkillManager(),
    ServerEventManager: new Ranvier.EventManager(),
    GameServer: new Ranvier.GameServer(),
    DataLoader: Ranvier.Data,
    EntityLoaderRegistry: new Ranvier.EntityLoaderRegistry(),
    DataSourceRegistry: new Ranvier.DataSourceRegistry(),
    Config
  }

  // initialize data sources and entity loaders
  GameState.DataSourceRegistry.load(require, __dirname, Config.get('dataSources'))
  GameState.EntityLoaderRegistry.load(GameState.DataSourceRegistry, Config.get('entityLoaders'))

  // set entity loaders
  GameState.AccountManager.setLoader(GameState.EntityLoaderRegistry.get('accounts'))
  GameState.PlayerManager.setLoader(GameState.EntityLoaderRegistry.get('players'))

  // initialize BundleManager with bundles and game state
  const BundleManager = new Ranvier.BundleManager(path.join(__dirname, '/bundles/'), GameState)
  GameState.BundleManager = BundleManager
  await BundleManager.loadBundles()
  GameState.ServerEventManager.attach(GameState.GameServer)

  // handle server start
  if (startServer) {
    Logger.log('START - Starting server')
    GameState.GameServer.startup(commander)

    // start entity ticks
    clearInterval(tickInterval)
    tickInterval = setInterval(() => {
      GameState.AreaManager.tickAll(GameState)
      GameState.ItemManager.tickAll()
    }, Config.get('entityTickFrequency', 100))

    // start player ticks
    clearInterval(playerTickInterval)
    playerTickInterval = setInterval(() => {
      GameState.PlayerManager.emit('updateTick')
    }, Config.get('playerTickFrequency', 100))
  }
}

// START IT UP!
init()
